import{_ as n,V as s,W as a,Z as e,X as t,a0 as p}from"./framework-fd1dac66.js";const o={},c=t("p",null,"urllib模块可以非常方便地抓取URL内容，然后返回内容，",-1),l=p(`<p><strong>1. urllib.urlopen(url[,data[,proxies]])</strong><code>urllib.request.urlopen(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None) </code> 描述：第一个参数可以传递URL之外，我们还可以传递其它的内容，比如 data （附加参数）， timeout （超时时间）等等。 data 参数是可选的，如果要添加 data ，它要是字节流编码格式的内容，即 bytes 类型，通过 bytes() 函数可以进行转化，另外如果你传递了这个 data 参数，它的请求方式就不再是 GET 方式请求，而是 POST 。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>urlopen返回对象提供方法：

        read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> readline<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> fileno<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> close<span class="token punctuation">(</span><span class="token punctuation">)</span> ：这些方法的使用方式与文件对象完全一样

        info<span class="token punctuation">(</span><span class="token punctuation">)</span>：返回一个httplib<span class="token punctuation">.</span>HTTPMessage对象，表示远程服务器返回的头信息

        getcode<span class="token punctuation">(</span><span class="token punctuation">)</span>：返回Http状态码。如果是http请求，<span class="token number">200</span>请求成功完成<span class="token punctuation">;</span><span class="token number">404</span>网址未找到

        geturl<span class="token punctuation">(</span><span class="token punctuation">)</span>：返回请求的url
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.urllib.urlretrieve(url[,filename[,reporthook[,data]]])</strong> 描述：将url定位到的html文件下载到你本地的硬盘中。如果不指定filename，则会存为临时文件。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request

request<span class="token punctuation">.</span>urlretrieve<span class="token punctuation">(</span>urlPath<span class="token punctuation">,</span> <span class="token string">&#39;./%s.jpg&#39;</span> <span class="token operator">%</span> fileName<span class="token punctuation">)</span>

urlPath<span class="token punctuation">:</span> 网页地址 <span class="token operator">/</span> 图片地址

fileName<span class="token punctuation">:</span> 储存地址 例如：<span class="token string">&#39;./python/img/xxx.html&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.urllib.urlcleanup()</strong> 描述：清除由于urllib.urlretrieve()所产生的缓存</p><p><strong>4.urllib.urlencode(query)</strong> 描述：将URL中的键值对以连接符&amp;划分,这里可以与urlopen结合以实现post方法和get方法 <strong>POST方法</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> urllib
data <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;wd&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;123456&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment"># b&#39;wd=123456&#39;</span>

html <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">&quot;http://httpbin.org/post&quot;</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>http://httpbin.org/post </code>这个地址可以用来测试 POST 请求，它可以输出请求和响应信息，其中就包含我们传递的 data 参数。</p><p><strong>GET方法</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request
 
response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">&quot;https://www.baidu.com&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5.urllib.request.Request的使用</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">urllib</span><span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> origin_req_host<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> unverifiable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>url</code> 参数是请求链接，这个是必传参数，其他的都是可选参数。</p></li><li><p><code>data</code> 参数如果要传必须传 <code>bytes</code> （字节流）类型的，如果是一个字典，可以先用 <code>urllib.parse.urlencode()</code> 编码。</p></li><li><p><code>headers</code> 参数是一个字典，你可以在构造 <code>Request</code> 时通过 <code>headers</code> 参数传递，也可以通过调用 Request 对象的 add_header() 方法来添加请求头。请求头最常用的用法就是通过修改 <code>User-Agent</code> 来伪装浏览器，默认的 <code>User-Agent</code> 是 <code>Python-urllib</code> ，你可以通过修改它来伪装浏览器，比如要伪装火狐浏览器，你可以把它设置为 <code>Mozilla/5.0 (X11; U; Linux i686)Gecko/20071127 Firefox/2.0.0.11</code></p></li><li><p><code>origin_req_host</code> 指的是请求方的 <code>host</code> 名称或者 <code>IP</code> 地址。</p></li><li><p><code>unverifiable</code> 指的是这个请求是否是无法验证的，默认是 <code>False</code> 。意思就是说用户没有足够权限来选择接收这个请求的结果。例如我们请求一个HTML文档中的图片，但是我们没有自动抓取图像的权限，这时 <code>unverifiable</code> 的值就是 <code>True</code> 。</p></li><li><p><code>method</code> 是一个字符串，它用来指示请求使用的方法，比如 <code>GET</code> ， <code>POST</code> ， <code>PUT</code> 等等。</p></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> urllib
 
request <span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">)</span>

response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们依然是用 urlopen() 方法来发送这个请求，只不过这次 urlopen() 方法的参数不再是一个URL，而是一个 Request ，通过构造这个这个数据结构，一方面我们可以将请求独立成一个对象，另一方面可配置参数更加丰富和灵活。</p><p>实例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token punctuation">,</span>parse

url <span class="token operator">=</span> <span class="token string">&quot;http://httpbin.org/post&quot;</span>

headers <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">#伪装一个火狐浏览器</span>
    <span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">:</span><span class="token string">&#39;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;host&quot;</span><span class="token punctuation">:</span><span class="token string">&#39;httpbin.org&#39;</span>
<span class="token punctuation">}</span>
<span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;Germey&quot;</span>
<span class="token punctuation">}</span>
data <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&quot;utf8&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># data = bytes(parse.urlencode(dict),encoding=&quot;utf8&quot;)</span>

req <span class="token operator">=</span> request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">)</span>
response <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里我们通过四个参数构造了一个 Request ， url 即请求链接，在 headers 中指定了 User-Agent 和 Host ，传递的参数 data 用了 urlencode() 和 bytes() 方法来转成字节流，另外指定了请求方式为 POST 。</p><p>结果是：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;args&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
  <span class="token string">&quot;data&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> 
  <span class="token string">&quot;files&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
  <span class="token string">&quot;form&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Germey&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> 
  <span class="token string">&quot;headers&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;Accept-Encoding&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;identity&quot;</span><span class="token punctuation">,</span> 
    <span class="token string">&quot;Connection&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;close&quot;</span><span class="token punctuation">,</span> 
    <span class="token string">&quot;Content-Length&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;11&quot;</span><span class="token punctuation">,</span> 
    <span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;application/x-www-form-urlencoded&quot;</span><span class="token punctuation">,</span> 
    <span class="token string">&quot;Host&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;httpbin.org&quot;</span><span class="token punctuation">,</span> 
    <span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> 
  <span class="token string">&quot;json&quot;</span><span class="token punctuation">:</span> null<span class="token punctuation">,</span> 
  <span class="token string">&quot;origin&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;125.46.249.76&quot;</span><span class="token punctuation">,</span> 
  <span class="token string">&quot;url&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;http://httpbin.org/post&quot;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span>Finished <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">.</span>3s<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>6.高级特性</strong> 接下来就需要更强大的工具 <code>Handler</code> 登场了。</p><p>简而言之你可以把它理解为各种处理器，有专门处理登录验证的，有处理 <code>Cookies</code> 的，有处理代理设置的，利用它们我们几乎可以做到任何 <code>HTTP</code> 请求中所有的事情。</p><p>首先介绍下 <code>urllib.request.BaseHandler</code> ，它是所有其他 <code>Handler</code> 的父类，它提供了最基本的 <code>Handler</code> 的方法，例 如 <code>default_open()</code> 、 <code>protocol_request()</code> 等。 接下来就有各种 <code>Handler</code> 类继承这个 <code>BaseHandler</code> ，列举如下：</p><ul><li><code>HTTPDefaultErrorHandler</code> 用于处理<code>HTTP</code>响应错误，错误都会抛出 <code>HTTPError</code> 类型的异常。</li><li><code>HTTPRedirectHandler</code> 用于处理重定向。</li><li><code>HTTPCookieProcessor</code> 用于处理 <code>Cookie</code> 。</li><li><code>ProxyHandler</code> 用于设置代理，默认代理为空。</li><li><code>HTTPPasswordMgr</code> 用于管理密码，它维护了用户名密码的表。</li><li><code>HTTPBasicAuthHandler</code> 用于管理认证，如果一个链接打开时需要认证，那么可以用它来解决认证问题。</li></ul><p>另外还有其他的 <code>Handler</code> ，可以参考官方文档。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它们怎么来使用，不用着急，下面会有实例为你演示。 另外一个比较重要的就是 OpenerDirector ，我们可以称之为 Opener ，我们之前用过 urllib.request.urlopen() 这个方法，实际上它就是一个 Opener 。 那么为什么要引入 Opener 呢？因为我们需要实现更高级的功能，之前我们使用的 Request 、 urlopen() 相当于类库为你封装好了极其常用的请求方法，利用它们两个我们就可以完成基本的请求，但是现在不一样了，我们需要实现更高级的功能，所以我们需要深入一层，使用更上层的实例来完成我们的操作。所以，在这里我们就用到了比调用 urlopen() 的对象的更普遍的对象，也就是 Opener 。</p><p>Opener 可以使用 open() 方法，返回的类型和 urlopen() 如出一辙。那么它和 Handler 有什么关系？简而言之，就是利用 Handler 来构建 Opener 。 <em>认证</em> 我们先用一个实例来感受一下</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request
auth_handler <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPBasicAuthHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>
auth_handler<span class="token punctuation">.</span>add_password<span class="token punctuation">(</span>realm<span class="token operator">=</span><span class="token string">&#39;PDQ Application&#39;</span><span class="token punctuation">,</span>
                          uri<span class="token operator">=</span><span class="token string">&#39;https://mahler:8092/site-updates.py&#39;</span><span class="token punctuation">,</span>
                          user<span class="token operator">=</span><span class="token string">&#39;klem&#39;</span><span class="token punctuation">,</span>
                          passwd<span class="token operator">=</span><span class="token string">&#39;kadidd!ehopper&#39;</span><span class="token punctuation">)</span>
opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>auth_handler<span class="token punctuation">)</span>
urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>install_opener<span class="token punctuation">(</span>opener<span class="token punctuation">)</span>
urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">&#39;http://www.example.com/login.html&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此处代码为实例代码，用于说明 <code>Handler</code> 和 <code>Opener</code> 的使用方法。在这里，首先实例化了一个 <code>HTTPBasicAuthHandler</code> 对象，然后利用 <code>add_password()</code> 添加进去用户名和密码，相当于建立了一个处理认证的处理器。 接下来利用 <code>urllib.request.build_opener()</code> 方法来利用这个处理器构建一个 <code>Opener</code> ，那么这个 <code>Opener</code> 在发送请求的时候就具备了认证功能了。接下来利用 <code>Opener</code> 的 <code>open()</code> 方法打开链接，就可以完成认证了。</p><p><em>代理</em> 如果添加代理，可以这样做：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request
proxy_handler <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>ProxyHandler<span class="token punctuation">(</span><span class="token punctuation">{</span>
<span class="token string">&#39;http&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;http://218.202.111.10:80&#39;</span><span class="token punctuation">,</span>
<span class="token string">&#39;https&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;https://180.250.163.34:8888&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>proxy_handler<span class="token punctuation">)</span>
response <span class="token operator">=</span> opener<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;https://www.baidu.com&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此处代码为实例代码，用于说明代理的设置方法，代理可能已经失效。</p><p>在这里使用了 ProxyHandler ， ProxyHandler 的参数是一个字典，key是协议类型，比如 http 还是 https 等，value是代理链接，可以添加多个代理。 然后利用 build_opener() 方法利用这个 Handler 构造一个 Opener ，然后发送请求即可。</p><p><strong>7.Cookie设置</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> http<span class="token punctuation">.</span>cookiejar<span class="token punctuation">,</span> urllib<span class="token punctuation">.</span>request
cookie <span class="token operator">=</span> http<span class="token punctuation">.</span>cookiejar<span class="token punctuation">.</span>CookieJar<span class="token punctuation">(</span><span class="token punctuation">)</span>
handler <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPCookieProcessor<span class="token punctuation">(</span>cookie<span class="token punctuation">)</span>
opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>handler<span class="token punctuation">)</span>
response <span class="token operator">=</span> opener<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;http://www.baidu.com&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> item <span class="token keyword">in</span> cookie<span class="token punctuation">:</span>
   <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">&quot;=&quot;</span><span class="token operator">+</span>item<span class="token punctuation">.</span>value<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>BAIDUID<span class="token operator">=</span>FA5D3EA91FC106883E2C63D56E7C667B<span class="token punctuation">:</span>FG<span class="token operator">=</span><span class="token number">1</span>
BIDUPSID<span class="token operator">=</span>FA5D3EA91FC106883E2C63D56E7C667B
H_PS_PSSID<span class="token operator">=</span>
PSTM<span class="token operator">=</span><span class="token number">1535618742</span>
BDSVRTM<span class="token operator">=</span><span class="token number">0</span>
BD_HOME<span class="token operator">=</span><span class="token number">0</span>
delPer<span class="token operator">=</span><span class="token number">0</span>
<span class="token punctuation">[</span>Finished <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>8s<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文章整理自<code>https://blog.csdn.net/bo_mask/article/details/76067790</code></p>`,39);function i(u,r){return s(),a("div",null,[c,e(" more "),l])}const k=n(o,[["render",i],["__file","Python-爬虫.html.vue"]]);export{k as default};
