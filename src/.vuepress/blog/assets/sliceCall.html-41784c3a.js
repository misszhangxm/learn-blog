import{_ as c,F as t,V as o,W as p,Z as l,X as n,Y as s,$ as i,a0 as a}from"./framework-fd1dac66.js";const u={},d=n("p",null,[s("[].shift.call( arguments ) 和 [].slice.call( arguments ) 祥解 经典的 "),n("code",null,"[].slice.call( arguments )"),s(" 关于这个的解释网上有很多，大多是 "),n("em",null,"“把类数组对象转为数组对象”"),s("。确实这是我们想要实现的功能！ 但这仅仅是说明了结果并没有解答其原理。")],-1),r=a(`<p>来点基础知识：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> arguments <span class="token punctuation">)</span>
<span class="token comment">// 等效于</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> arguments <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>个人理解：</strong> 要把<code>arguments</code> 转为数组对象！ 本着 <strong>能少写就少写，能不写就不写的想法</strong>，想到<code>slice():可从已有的数组中返回选定的元素。</code><code>slice</code> 不会改变原来的数组，而是返回一个子数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> kindle <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>kindle<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// [ 1, 2, 3, 4, 5, 6, 7 ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>那么下一个问题又来了，<code>arguments</code> 不是数组对象，不能调用数组的方法。 <code>arguments</code>想要转为数组对象，怎么转？ <code>for</code>循环等。。。</p><p>但是<strong>能少写就少写，能不写就不写</strong> 这时候又要解锁一个<code>call</code>函数，或者 <code>apply</code> 函数。这两个函数都可以改变函数 <code>this</code> 的指向，函数运行时的作用域。区别就是参数不一样，<strong>第一个参数都是一个对象或者 ‘this’ 注意this加引号了， apply第二个参数接收一个数组，call则不是，call可以有n个参数有多少放多少就行</strong></p>`,6),m=n("strong",null,"call函数详解",-1),k={href:"https://mrceel.cn/call%E5%87%BD%E6%95%B0%E7%90%86%E8%A7%A3.html",target:"_blank",rel:"noopener noreferrer"},g=a('<p><code>slice</code> 方法原理就是根据传入的参数（值）对原数组（或者类数组）进行遍历获取，赋给新数组然后返回。如果没有参数便复制整个原数组（或者类数组），后赋给新数组然后返回。</p><p><strong>重点来了</strong><strong>因为<code>slice</code>内部实现是使用的<code>this</code>代表调用对象。那么当<code>[].slice.call()</code> 传入 <code>arguments </code>对象的时候，通过 <code>call </code>函数改变原来 <code>slice</code>方法的<code>this</code>指向, 使其指向<code>arguments</code>，并对<code>arguments</code>进行复制操作，而后返回一个新数组。至此便是完成了<code>arguments</code>类数组转为数组的目的！</strong></p><p>其实这可以理解为，<strong>让类数组调用数组的方法！</strong></p><h3 id="shift-call-arguments" tabindex="-1"><a class="header-anchor" href="#shift-call-arguments" aria-hidden="true">#</a> <code>[].shift.call( arguments )</code></h3><p><code>[].shift.call( arguments )</code> 这便是一个例子。 <code>shift()</code> 方法删除数组第一项，并返回删除项。 根据上边的理解，这句代码意思就是： “删除并拿到<code>arguments</code>的第一项”</p>',5);function h(v,_){const e=t("ExternalLinkIcon");return o(),p("div",null,[d,l(" more "),r,n("p",null,[m,n("a",k,[s("点击这里"),i(e)])]),g])}const b=c(u,[["render",h],["__file","sliceCall.html.vue"]]);export{b as default};
