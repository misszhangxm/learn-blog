import{_ as t,V as e,W as l,Z as d,X as s,a0 as n}from"./framework-fd1dac66.js";const a={},r=s("p",null,"仅仅是为了自己方便看。 os 模块提供了非常丰富的方法用来处理文件和目录。常用的方法如下表所示：",-1),i=n('<table><thead><tr><th style="text-align:center;">序号</th><th style="text-align:left;">方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:left;">os.access(path, mode)</td><td style="text-align:left;">检验权限模式</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:left;">os.chdir(path)</td><td style="text-align:left;">改变当前工作目录</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:left;">os.chflags(path, flags)</td><td style="text-align:left;">设置路径的标记为数字标记。</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:left;">os.chmod(path, mode)</td><td style="text-align:left;">更改权限</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:left;">os.chown(path, uid, gid)</td><td style="text-align:left;">更改文件所有者</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:left;">os.chroot(path)</td><td style="text-align:left;">改变当前进程的根目录</td></tr><tr><td style="text-align:center;">7</td><td style="text-align:left;">os.close(fd)</td><td style="text-align:left;">关闭文件描述符 fd</td></tr><tr><td style="text-align:center;">8</td><td style="text-align:left;">os.closerange(fd_low, fd_high)</td><td style="text-align:left;">关闭所有文件描述符，从 fd_low (包含) 到 fd_high (不包含), 错误会忽略</td></tr><tr><td style="text-align:center;">9</td><td style="text-align:left;">os.dup(fd)</td><td style="text-align:left;">复制文件描述符 fd</td></tr><tr><td style="text-align:center;">10</td><td style="text-align:left;">os.dup2(fd, fd2)</td><td style="text-align:left;">将一个文件描述符 fd 复制到另一个 fd2</td></tr><tr><td style="text-align:center;">11</td><td style="text-align:left;">os.fchdir(fd)</td><td style="text-align:left;">通过文件描述符改变当前工作目录</td></tr><tr><td style="text-align:center;">12</td><td style="text-align:left;">os.fchmod(fd, mode)</td><td style="text-align:left;">改变一个文件的访问权限，该文件由参数fd指定，参数mode是Unix下的文件访问权限。</td></tr><tr><td style="text-align:center;">13</td><td style="text-align:left;">os.fchown(fd, uid, gid)</td><td style="text-align:left;">修改一个文件的所有权，这个函数修改一个文件的用户ID和用户组ID，该文件由文件描述符fd指定。</td></tr><tr><td style="text-align:center;">14</td><td style="text-align:left;">os.fdatasync(fd)</td><td style="text-align:left;">强制将文件写入磁盘，该文件由文件描述符fd指定，但是不强制更新文件的状态信息。</td></tr><tr><td style="text-align:center;">15</td><td style="text-align:left;">os.fdopen(fd[, mode[, bufsize]])</td><td style="text-align:left;">通过文件描述符 fd 创建一个文件对象，并返回这个文件对象</td></tr><tr><td style="text-align:center;">16</td><td style="text-align:left;">os.fpathconf(fd, name)</td><td style="text-align:left;">返回一个打开的文件的系统配置信息。name为检索的系统配置的值，它也许是一个定义系统值的字符串，这些名字在很多标准中指定（POSIX.1, Unix 95, Unix 98, 和其它）。</td></tr><tr><td style="text-align:center;">17</td><td style="text-align:left;">os.fstat(fd)</td><td style="text-align:left;">返回文件描述符fd的状态，像stat()。</td></tr><tr><td style="text-align:center;">18</td><td style="text-align:left;">os.fstatvfs(fd)</td><td style="text-align:left;">返回包含文件描述符fd的文件的文件系统的信息，像 statvfs()</td></tr><tr><td style="text-align:center;">19</td><td style="text-align:left;">os.fsync(fd)</td><td style="text-align:left;">强制将文件描述符为fd的文件写入硬盘。</td></tr><tr><td style="text-align:center;">20</td><td style="text-align:left;">os.ftruncate(fd, length)</td><td style="text-align:left;">裁剪文件描述符fd对应的文件, 所以它最大不能超过文件大小。</td></tr><tr><td style="text-align:center;">21</td><td style="text-align:left;">os.getcwd()</td><td style="text-align:left;">返回当前工作目录</td></tr><tr><td style="text-align:center;">22</td><td style="text-align:left;">os.getcwdu()</td><td style="text-align:left;">返回一个当前工作目录的Unicode对象</td></tr><tr><td style="text-align:center;">23</td><td style="text-align:left;">os.isatty(fd)</td><td style="text-align:left;">如果文件描述符fd是打开的，同时与tty(-like)设备相连，则返回true, 否则False。</td></tr><tr><td style="text-align:center;">24</td><td style="text-align:left;">os.lchflags(path, flags)</td><td style="text-align:left;">设置路径的标记为数字标记，类似 chflags()，但是没有软链接</td></tr><tr><td style="text-align:center;">25</td><td style="text-align:left;">os.lchmod(path, mode)</td><td style="text-align:left;">修改连接文件权限</td></tr><tr><td style="text-align:center;">26</td><td style="text-align:left;">os.lchown(path, uid, gid)</td><td style="text-align:left;">更改文件所有者，类似 chown，但是不追踪链接。</td></tr><tr><td style="text-align:center;">27</td><td style="text-align:left;">os.link(src, dst)</td><td style="text-align:left;">创建硬链接，名为参数 dst，指向参数 src</td></tr><tr><td style="text-align:center;">28</td><td style="text-align:left;">os.listdir(path)</td><td style="text-align:left;">返回path指定的文件夹包含的文件或文件夹的名字的列表。</td></tr><tr><td style="text-align:center;">29</td><td style="text-align:left;">os.lseek(fd, pos, how)</td><td style="text-align:left;">设置文件描述符 fd当前位置为pos, how方式修改: SEEK_SET 或者 0 设置从文件开始的计算的pos; SEEK_CUR或者 1 则从当前位置计算; os.SEEK_END或者2则从文件尾部开始. 在unix，Windows中有效</td></tr><tr><td style="text-align:center;">30</td><td style="text-align:left;">os.lstat(path)</td><td style="text-align:left;">像stat(),但是没有软链接</td></tr><tr><td style="text-align:center;">31</td><td style="text-align:left;">os.major(device)</td><td style="text-align:left;">从原始的设备号中提取设备major号码 (使用stat中的st_dev或者st_rdev field)。</td></tr><tr><td style="text-align:center;">32</td><td style="text-align:left;">os.makedev(major, minor)</td><td style="text-align:left;">以major和minor设备号组成一个原始设备号</td></tr><tr><td style="text-align:center;">33</td><td style="text-align:left;">os.makedirs(path[, mode])</td><td style="text-align:left;">递归文件夹创建函数。像mkdir(), 但创建的所有intermediate-level文件夹需要包含子文件夹。</td></tr><tr><td style="text-align:center;">34</td><td style="text-align:left;">os.minor(device)</td><td style="text-align:left;">从原始的设备号中提取设备minor号码 (使用stat中的st_dev或者st_rdev field )。</td></tr><tr><td style="text-align:center;">35</td><td style="text-align:left;">os.mkdir(path[, mode])</td><td style="text-align:left;">以数字mode的mode创建一个名为path的文件夹.默认的 mode 是 0777 (八进制)。</td></tr><tr><td style="text-align:center;">36</td><td style="text-align:left;">os.mkfifo(path[, mode])</td><td style="text-align:left;">创建命名管道，mode 为数字，默认为 0666 (八进制)</td></tr><tr><td style="text-align:center;">37</td><td style="text-align:left;">os.mknod(filename[, mode=0600, device])</td><td style="text-align:left;">创建 一个名为filename文件系统节点（文件，设备特别文件或者命名pipe 38os.open(file, flags[, mode])打开一个文件，并且设置需要的打开选项，mode参数是可选的</td></tr><tr><td style="text-align:center;">39</td><td style="text-align:left;">os.openpty()</td><td style="text-align:left;">打开一个新的伪终端对。返回 pty 和 tty的文件描述符。</td></tr><tr><td style="text-align:center;">40</td><td style="text-align:left;">os.pathconf(path, name)</td><td style="text-align:left;">返回相关文件的系统配置信息。</td></tr><tr><td style="text-align:center;">41</td><td style="text-align:left;">os.pipe()</td><td style="text-align:left;">创建一个管道. 返回一对文件描述符(r, w) 分别为读和写</td></tr><tr><td style="text-align:center;">42</td><td style="text-align:left;">os.popen(command[, mode[, bufsize]])</td><td style="text-align:left;">从一个 command 打开一个管道</td></tr><tr><td style="text-align:center;">43</td><td style="text-align:left;">os.read(fd, n)</td><td style="text-align:left;">从文件描述符 fd 中读取最多 n 个字节，返回包含读取字节的字符串，文件描述符 fd对应文件已达到结尾, 返回一个空字符串。</td></tr><tr><td style="text-align:center;">44</td><td style="text-align:left;">os.readlink(path)</td><td style="text-align:left;">返回软链接所指向的文件</td></tr><tr><td style="text-align:center;">45</td><td style="text-align:left;">os.remove(path)</td><td style="text-align:left;">删除路径为path的文件。如果path 是一个文件夹，将抛出OSError; 查看下面的rmdir()删除一个 directory。</td></tr><tr><td style="text-align:center;">46</td><td style="text-align:left;">os.removedirs(path)</td><td style="text-align:left;">递归删除目录。</td></tr><tr><td style="text-align:center;">47</td><td style="text-align:left;">os.rename(src, dst)</td><td style="text-align:left;">重命名文件或目录，从 src 到 dst</td></tr><tr><td style="text-align:center;">48</td><td style="text-align:left;">os.renames(old, new)</td><td style="text-align:left;">递归地对目录进行更名，也可以对文件进行更名。</td></tr><tr><td style="text-align:center;">49</td><td style="text-align:left;">os.rmdir(path)</td><td style="text-align:left;">删除path指定的空目录，如果目录非空，则抛出一个OSError异常。</td></tr><tr><td style="text-align:center;">50</td><td style="text-align:left;">os.stat(path)</td><td style="text-align:left;">获取path指定的路径的信息，功能等同于C API中的stat()系统调用。</td></tr><tr><td style="text-align:center;">51</td><td style="text-align:left;">os.stat_float_times([newvalue])</td><td style="text-align:left;">决定 stat_result 是否以float对象显示时间 52os.statvfs(path) 获取指定路径的文件系统统计信息</td></tr><tr><td style="text-align:center;">53</td><td style="text-align:left;">os.symlink(src, dst)</td><td style="text-align:left;">创建一个软链接</td></tr><tr><td style="text-align:center;">54</td><td style="text-align:left;">os.tcgetpgrp(fd)</td><td style="text-align:left;">返回与终端fd（一个由os.open()返回的打开的文件描述符）关联的进程组</td></tr><tr><td style="text-align:center;">55</td><td style="text-align:left;">os.tcsetpgrp(fd, pg)</td><td style="text-align:left;">设置与终端fd（一个由os.open()返回的打开的文件描述符）关联的进程组为pg。</td></tr><tr><td style="text-align:center;">56</td><td style="text-align:left;">os.tempnam([dir[, prefix]])</td><td style="text-align:left;">Python3 中已删除。返回唯一的路径名用于创建临时文件。</td></tr><tr><td style="text-align:center;">57</td><td style="text-align:left;">os.tmpfile()</td><td style="text-align:left;">Python3 中已删除。返回一个打开的模式为(w+b)的文件对象 .这文件对象没有文件夹入口，没有文件描述符，将会自动删除。</td></tr><tr><td style="text-align:center;">58</td><td style="text-align:left;">os.tmpnam()</td><td style="text-align:left;">Python3 中已删除。为创建一个临时文件返回一个唯一的路径</td></tr><tr><td style="text-align:center;">59</td><td style="text-align:left;">os.ttyname(fd)</td><td style="text-align:left;">返回一个字符串，它表示与文件描述符fd 关联的终端设备。如果fd 没有与终端设备关联，则引发一个异常。</td></tr><tr><td style="text-align:center;">60</td><td style="text-align:left;">os.unlink(path)</td><td style="text-align:left;">删除文件路径</td></tr><tr><td style="text-align:center;">61</td><td style="text-align:left;">os.utime(path, times)</td><td style="text-align:left;">返回指定的path文件的访问和修改的时间。</td></tr><tr><td style="text-align:center;">62</td><td style="text-align:left;">os.walk(top[, topdown=True[, onerror=None[, followlinks=False]]])</td><td style="text-align:left;">输出在文件夹中的文件名通过在树中游走，向上或者向下。</td></tr><tr><td style="text-align:center;">63</td><td style="text-align:left;">os.write(fd, str)</td><td style="text-align:left;">写入字符串到文件描述符 fd中. 返回实际写入的字符串长度</td></tr></tbody></table>',1);function f(g,y){return e(),l("div",null,[r,d(" more "),i])}const o=t(a,[["render",f],["__file","Python-OS.html.vue"]]);export{o as default};
