import{_ as s,F as a,V as i,W as d,$ as c,a1 as r,Z as l,Y as t,a0 as o,X as e}from"./framework-fd1dac66.js";const v={},u=e("h1",{id:"object-entries",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#object-entries","aria-hidden":"true"},"#"),t(" Object.entries();")],-1),b=o(`<p>Object.entries([1, 2]) //[[&#39;0&#39;, 1], [&#39;1&#39;, 2]]</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
Object.entries()返回的数组的顺序与for-in循环保持一致，即如果对象的key值是数字，则返回值会对key值进行排序，返回的是排序后的结果。
例如：
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Object.entries({ 3: &#39;a&#39;, 4: &#39;b&#39;, 1: &#39;c&#39; }) //[[&#39;1&#39;, &#39;c&#39;], [&#39;3&#39;, &#39;a&#39;], [&#39;4&#39;, &#39;b&#39;]]</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
使用Object.entries()，我们还可以进行对象属性的遍历。例如：
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>let obj = { one: 1, two: 2 }; for (let [k,v] of Object.entries(obj)) { console.log(<code>\${JSON.stringify(k)}: \${JSON.stringify(v)}</code>); }</p><p>//输出结果如下： &#39;one&#39;: 1 &#39;two&#39;: 2</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
# Object.values()

它的工作原理跟Object.entries()很像，顾名思义，它只返回自己的键值对中属性的值。它返回的数组顺序，也跟Object.entries()保持一致。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Object.values({ one: 1, two: 2 }) //[1, 2] Object.values({ 3: &#39;a&#39;, 4: &#39;b&#39;, 1: &#39;c&#39; }) //[&#39;c&#39;, &#39;a&#39;, &#39;b&#39;]</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div>`,9);function m(p,x){const n=a("center");return i(),d("div",null,[c(n,null,{default:r(()=>[u]),_:1}),l(" more "),t(" ** 如果一个对象是具有键值对的数据结构，则每一个键值对都将会编译成一个具有两个元素的数组，这些数组最终会放到一个数组中，返回一个二维数组。 ** 简言之，该方法会将某个对象的可枚举属性与值按照二维数组的方式返回。 若目标对象是数组时，则会将数组的下标作为键值返回。 例如： ``` Object.entries({ one: 1, two: 2 }) //[['one', 1], ['two', 2]] "),b])}const _=s(v,[["render",m],["__file","es7.html.vue"]]);export{_ as default};
