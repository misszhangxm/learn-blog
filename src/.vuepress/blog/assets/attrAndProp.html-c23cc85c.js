import{_ as t,F as e,V as o,W as p,$ as c,a1 as r,Z as l,Y as a,a0 as i,X as s}from"./framework-fd1dac66.js";const d={},u=s("h1",{id:"jquery中attr和prop的区别",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#jquery中attr和prop的区别","aria-hidden":"true"},"#"),a(" jquery中attr和prop的区别")],-1),k=i(`<p>对于HTML元素本身就带有的固有属性，在处理时，使用prop方法。 对于HTML元素我们自己自定义的DOM属性，在处理时，使用attr方法。</p><p>举几个例子就知道了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&quot;http://www.baidu.com&quot;</span> target<span class="token operator">=</span><span class="token string">&quot;_self&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;btn&quot;</span><span class="token operator">&gt;</span>百度<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个例子里<code>&lt;a&gt;</code>元素的DOM属性有“<code>href、target</code>和<code>class</code>&quot;，这些属性就是<code>&lt;a&gt;</code>元素本身就带有的属性，也是W3C标准里就包含有这几个属性，或者说在IDE里能够智能提示出的属性，这些就叫做固有属性。处理这些属性时，建议使用<code>prop</code>方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&quot;#&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;link1&quot;</span> action<span class="token operator">=</span><span class="token string">&quot;delete&quot;</span><span class="token operator">&gt;</span>删除<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个例子里<code>&lt;a&gt;</code>元素的DOM属性有“<code>href、id</code>和<code>action</code>”，很明显，前两个是固有属性，而后面一个“<code>action</code>”属性是我们自己自定义上去的，<code>&lt;a&gt;</code>元素本身是没有这个属性的。这种就是自定义的DOM属性。处理这些属性时，建议使用<code>attr</code>方法。使用<code>prop</code>方法取值和设置属性值时，都会返回<code>undefined</code>值。</p><p>再举一个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">&quot;chk1&quot;</span> type<span class="token operator">=</span><span class="token string">&quot;checkbox&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token comment">//是否可见</span>
<span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">&quot;chk2&quot;</span> type<span class="token operator">=</span><span class="token string">&quot;checkbox&quot;</span> checked<span class="token operator">=</span><span class="token string">&quot;checked&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token comment">//是否可见</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>像<code>checkbox，radio</code>和<code>select</code>这样的元素，选中属性对应“<code>checked</code>”和“<code>selected</code>”，这些也属于固有属性，因此需要使用<code>prop</code>方法去操作才能获得正确的结果。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#chk1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">&quot;checked&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#chk2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">&quot;checked&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果上面使用<code>attr</code>方法，则会出现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#chk1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;checked&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">undefined</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#chk2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;checked&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;checked&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function g(v,q){const n=e("center");return o(),p("div",null,[c(n,null,{default:r(()=>[u]),_:1}),l(" more "),a(" 在高版本的jquery引入prop方法后，什么时候该用prop？什么时候用attr？它们两个之间有什么区别？这些问题就出现了。 "),k])}const h=t(d,[["render",g],["__file","attrAndProp.html.vue"]]);export{h as default};
